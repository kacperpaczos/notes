# Typy danych i zależności w JavaScript

JavaScript jest dynamicznie typowanym językiem programowania, co oznacza, że zmienne mogą przechowywać różne typy danych w różnych momentach. Oto główne typy danych w JS:

## 1. Typy prymitywne

### a) Number
- Reprezentuje zarówno liczby całkowite, jak i zmiennoprzecinkowe
- Przykład: `let x = 42;` lub `let y = 3.14;`

### b) String
- Reprezentuje tekst
- Przykład: `let name = "JavaScript";`

### c) Boolean
- Reprezentuje wartość logiczną true lub false
- Przykład: `let isActive = true;`

### d) Undefined
- Reprezentuje zmienną, która została zadeklarowana, ale nie przypisano jej wartości
- Przykład: `let x;`

### e) Null
- Reprezentuje celowy brak jakiejkolwiek wartości obiektu
- Przykład: `let empty = null;`

### f) Symbol (od ES6)
- Reprezentuje unikalny identyfikator
- Przykład: `let sym = Symbol("opis");`

### g) BigInt (od ES11)
- Reprezentuje bardzo duże liczby całkowite
- Przykład: `let bigNumber = 1234567890123456789012345678901234567890n;`

## 2. Typy złożone

### a) Object
- Reprezentuje kolekcję powiązanych danych i/lub funkcjonalności
- Przykład: `let person = {name: "Jan", age: 30};`

### b) Array
- Specjalny rodzaj obiektu używany do przechowywania uporządkowanych kolekcji danych
- Przykład: `let fruits = ["jabłko", "banan", "gruszka"];`

### c) Function
- Również jest obiektem, ale może być wywoływana
- Przykład: `function greet() { console.log("Cześć!"); }`

## Zależności między typami

1. Wszystkie typy prymitywne są niemutowalne (immutable).
2. Obiekty i tablice są mutowalne (mutable).
3. Funkcje są obiektami pierwszej klasy, co oznacza, że mogą być przypisywane do zmiennych, przekazywane jako argumenty i zwracane z innych funkcji.
4. W JavaScript istnieje automatyczna konwersja typów, np. string może być automatycznie konwertowany na number w operacjach arytmetycznych.
5. Operator typeof zwraca string reprezentujący typ (tag) operandu.
6. Null jest specjalnym przypadkiem - typeof null zwraca "object", co jest błedem w języku, wartości w JS są reprezentowane przez Tag i Value; Tag dla obiektów to 0, a null to 0x000 w systemach komputerowych, jest to więc bład kojarzenia tagów i błedne interpretowane typów danych.
7. Tablice są specjalnym rodzajem obiektu, gdzie kluczami są indeksy numeryczne.


// Demonstracja operatora typeof

// Typy prymitywne
console.log(typeof 42);              // "number"
console.log(typeof 3.14);            // "number"
console.log(typeof "JavaScript");    // "string"
console.log(typeof true);            // "boolean"
console.log(typeof undefined);       // "undefined"
console.log(typeof null);            // "object" (to jest znany błąd w JavaScript)
console.log(typeof Symbol("opis"));  // "symbol"
console.log(typeof 1234567890123456789012345678901234567890n); // "bigint"

// Typy złożone
console.log(typeof {});              // "object"
console.log(typeof []);              // "object" (tablice są specjalnym rodzajem obiektu)
console.log(typeof function(){});    // "function"

// Przykłady z zmiennymi
let num = 100;
let str = "Hej";
let bool = false;
let arr = [1, 2, 3];
let obj = {a: 1, b: 2};
let func = function() { return "Cześć"; };

console.log(typeof num);   // "number"
console.log(typeof str);   // "string"
console.log(typeof bool);  // "boolean"
console.log(typeof arr);   // "object"
console.log(typeof obj);   // "object"
console.log(typeof func);  // "function"
