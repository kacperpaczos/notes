Monada to typ danych z operatorem "no a potem".
A Monad is a type with an "and then" operator.

Najbardziej podstawowa jednostka to obiekt (object). Może on reprezentować cokolwiek zechce.

Obiekty mogą zostać przyporządkowane (mapped) jedne drugim lub też między sobą. 
Jeśli jeden obiekt idzie do drugiego, nazywa się to morfizmem (morphism).
Jeśli obiekt idzie sam od siebie, nazywa się to endomorfizmem (endomorphism).

Zbiór jakoś przyporządkowanych obiektów nazywa się kategorią (category).

Między kategoriami, przemiany jedną w drugą, działają funktory (functors). 
Funktory nie tylko zmieniają obiekt z jednej kategorii na obiekt w drugiej kategorii, ale także:
- zachowują morfizmy (relacje) między obiektami
- zachowują kompozycję (zbiory relacji) morfizmów
- zachowują morfizmy tożsamościowe (identity morphisms)
- ogólnie zachowują strukturę relacji między obiektami przy przejściu między kategoriami

Są to warunki prawidłowego funktora, określane jako kategoria musi być zachowana (category must be preserved).

Endofunktor (endofunctor) to funktor, który mapuje kategorię na samą siebie.

Monad to specjalny rodzaj endofunktora z dodatkowymi właściwościami:
- `unit` (return): Funkcja, która "opakuje" wartość w monadę.
- `join` (flatten): Funkcja, która "spłaszcza" zagnieżdżone monady.
- `bind` (>>=): Operacja łącząca monady (często implementowana jako kombinacja map i join).

Przykłady monad:
- `Maybe` (obsługa wartości null)
- `List` (operacje na listach)
- `IO` (operacje wejścia/wyjścia)

Monady pomagają w zarządzaniu efektami ubocznymi w czystym kodzie funkcyjnym. Pozwalają na sekwencyjne wykonywanie operacji z zachowaniem kontekstu (np. obsługa błędów, asynchroniczność).

Korzyści z używania monad:
- Czytelniejszy kod dzięki abstrakcji złożonych operacji.
- Lepsza kontrola nad przepływem danych i efektami ubocznymi.
- Możliwość komponowania operacji monadycznych (monadic operations).
